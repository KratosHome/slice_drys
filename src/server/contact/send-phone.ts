import type { NextApiRequest, NextApiResponse } from 'next'
import TelegramBot from 'node-telegram-bot-api'

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ –ø–æ–∑–∞ –æ–±—Ä–æ–±–Ω–∏–∫–æ–º –∑–∞–ø–∏—Ç—ñ–≤
const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID } = process.env
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN!, { polling: false })

export default async function SendPhone(
  req: NextApiRequest,
  res: NextApiResponse,
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { phoneNumber } = req.body

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!phoneNumber || !/^\+380\d{9}$/.test(phoneNumber)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞' })
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    await bot.sendMessage(
      TELEGRAM_CHAT_ID!,
      `üì± –ù–æ–≤–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ${phoneNumber}\nüìÖ –î–∞—Ç–∞: ${new Date().toLocaleString()}`,
    )

    res.status(200).json({ success: true })
  } catch (error) {
    console.error('Error:', error)
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
}
